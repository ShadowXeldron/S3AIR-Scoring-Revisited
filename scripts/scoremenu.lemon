// // Data select and score stuff for my rankings mod which I really need a real name for

global bool scr.scoreMenuIsActive = 0

/*
//# address-hook(0x01ad20) end(0x01af68)
function void DrawObject()
{
    if scr.scoreMenuIsActive == 1
        return
    else
        base.DrawObject()
}
*/
//# address-hook(0x00d7c0) end(0x00d7e6)
function void fn00d7c0() // fn00d96a and fn00d7c0 were here
{
    if (Input.buttonPressed(scr.option.menuButton)) // Replace this with a configurable option
    {
        playSound(0xaf)
        //global.game_mode = 0xEA
        scr.openScoreMenu() // EA was chosen because Electronic Arts is inherently funny
    }

    else
    {
        base.fn00d7c0()
    }
}

// This P rank is dedicated to Imabigsonicfan1234

function void scr.openScoreMenu() // This is the rudimentaryest menu ever. It also contains the worst case of write-only spaghetti code that I have ever produced.
{
    scr.scoreMenuIsActive = 1
	//Renderer.drawSprite("scoremenu-bg", 0, 0, 0, 0, 0xfffd)
	
    string currentchar = 0

    while (scr.scoreMenuIsActive == 1)
    {
        SpriteHandle scoremenu_bg = Renderer.addSpriteHandle("scoremenu-bg", 0, 0, 0xfffd)
        scoremenu_bg.setPriorityFlag(true)

        Renderer.resetSprites()

        // Draw backgrounds

        // Write all of the text
        Renderer.drawText("oxyfont_regular", 10, 10, stringformat("%s's Scorecard", CHAR_NAMES[currentchar]), 0x0f0f0fff, 1, 0, 0xfffe, 0)

        // I need a more effective way of doing this. Right now, we have the functions from hell. I did try a for loop, but it was glitchy.
        /*
            Because this code is practically unreadable with all the functions within functions that it has, I may as well explain how it works.
            This uses the stringformat function to generate a string containing the rank letter and high score for every act. I originally tried to use the internal global.zone_act
            values for this, but they didn't exactly work 
        */

        DrawText(0, currentchar)
        DrawText(1, currentchar)
        DrawText(2, currentchar)
        DrawText(3, currentchar)
        DrawText(4, currentchar)
        DrawText(5, currentchar)
        DrawText(6, currentchar)
        DrawText(7, currentchar)
        DrawText(8, currentchar)
        DrawText(9, currentchar)
        DrawText(10, currentchar)
        DrawText(11, currentchar)
        
        // Print controls here 
        Renderer.drawText("oxyfont_tiny", 230, 130, "A - Do something", 0x0f0f0fff, 1, 0, 0xfffe, 0)
        Renderer.drawText("oxyfont_tiny", 230, 145, "B - Clear Data", 0x0f0f0fff, 1, 0, 0xfffe, 0)
        Renderer.drawText("oxyfont_tiny", 230, 160, "X - Close menu", 0x0f0f0fff, 1, 0, 0xfffe, 0)
        Renderer.drawText("oxyfont_tiny", 230, 175, "Y - Access secrets", 0x0f0f0fff, 1, 0, 0xfffe, 0)


        waitForNextFrame()
    	
        if (Input.buttonPressed(BUTTON_LEFT))
        {
            if currentchar == 0
                currentchar = 4
            else
                --currentchar // Decrement currentchar
            Audio.playAudio(SFX_CLICK)
        }
                
            
        else if (Input.buttonPressed(BUTTON_RIGHT))
        {
            scr.scoreMenuIsActive = 0
            if currentchar == 4
                currentchar = 0
            else
                ++currentchar // Increment currentchar
            Audio.playAudio(SFX_CLICK)
            scr.scoreMenuIsActive = 1
        }            

        else if (Input.buttonPressed(BUTTON_A))
        {
            Audio.playAudio(SFX_DROWN)
            scr.clearAllScoreData()
            scr.saveHighScore(0x0B01, 0, true)
            //break
        }

        else if (Input.buttonPressed(BUTTON_B))
        {
            scr.scoreMenuIsActive = 0
            //break
        }

        else if (Input.buttonPressed(BUTTON_Y))
        {
            Audio.playAudio(SFX_RING_ALT)
            //break
        }
            
        else if (Input.buttonPressed(BUTTON_BACK))
        {
            scr.scoreMenuIsActive = 0// Delete all scores
        }

        //waitForNextFrame() // The game dies of heart failure if you don't include this

        //scr.scoreMenuIsActive = 0
        //global.game_mode = 0x4c
    }
}

function void DrawText(u8 i, string currentchar)
{
	//better then spaghetti
	constant array <u64> ForcedZoneNames = 
	{
		"Angel Island", "Hydrocity", "Marble Garden", "Carnival Night", "Ice Cap", "Launch Base",
		"Mushroom Hill", "Flying Battery", "Sandopolis", "Lava Reef", "Sky Sanctuary", "Death Egg"
	}
	constant array <u64> ForcedNamesShort = 
	{
		"AIZ", "HCZ", "MGZ", "CNZ", "ICZ", "LBZ", "MHZ", "FBZ", "SOZ", "LRZ", "SSZ", "DEZ"
	}
	
	u16 var = (i < 5) ? 10 : ((i < 10) ? 130 : 210)
	u8 varI = (i < 5) ? i : (i < 10 ? (i - 5) : (i - 10))
	
	//debugLog(stringformat("v : %d, i :%d", var, varI))
	//debugLog(stringformat("%s1", ForcedNamesShort[i]))
	
	string anothervar = stringformat("%s1", ForcedNamesShort[i])
	string anothervar1 = stringformat("%s2", ForcedNamesShort[i])
	
	Renderer.drawText("oxyfont_small", var, 25 + 40 * varI, ForcedZoneNames[i], 0x0f0f0fff, 1, 0, 0xfffe, 0) // Was 0xe000
	Renderer.drawText("oxyfont_tiny", var, 35 + 40 * varI, stringformat("Act 1: %d %s %s", scr.getHighScoreString(anothervar, currentchar), scr.rankToLetter(scr.getBestRankString(anothervar, currentchar)), scr.isPLetter(anothervar, currentchar)), 0x0f0f0fff, 1, 0, 0xfffe, 0)
	Renderer.drawText("oxyfont_tiny", var, 45 + 40 * varI, stringformat("Act 2: %d %s %s", scr.getHighScoreString(anothervar1, currentchar), scr.rankToLetter(scr.getBestRankString(anothervar1, currentchar)), scr.isPLetter(anothervar1, currentchar)), 0x0f0f0fff, 1, 0, 0xfffe, 0)
    // But I like spaghetti! Especially with vinegar
}


function string scr.isPLetter(string act, u8 char) // Used to spit out the P rank boolean
{
    if scr.hasPRankString(act, char) == true
        return "P"
    else
        return " " // blank space for people who aren't P at the game
}

// Tempo was here. Someone should probably introduce him to ToeJam and Earl; they'd probably all get along just fine.

function void DataSelect.drawCustomPlanes()
{
	// Draw our own widescreen version of the background
	// TODO: The actual background still gets rendered, though it's not visible at all
	//  -> Maybe the plane W is used here?
	Renderer.drawCustomSprite(scr.getDataSelectBackground(), getScreenExtend() - 40, 0, 0x00, 0, 0x2000)

	// Custom rendering of plane B (which is not the background here) to ignore the wrapping
	s16 px = s16(camera.foreground.x.u16)
	if (px < 0)
	{
		Renderer.enableDefaultPlane(2, false)
		Renderer.setupPlane(-px, 0, getScreenWidth() + px, getScreenHeight(), 0x10, 0, 0x3000)
	}
	else if (px > 0x400 - getScreenWidth())
	{
		Renderer.enableDefaultPlane(2, false)
		Renderer.setupPlane(0, 0, 0x400 - px, getScreenHeight(), 0x10, 0, 0x3000)
	}
}


function u64 scr.getDataSelectBackground()
{
    /*
        Heya Boomers*! This is not Megadroid speaking. You have to deal with ShadowXeldron instead, who is a mere hume (or a zombie-dragon. Or a Xeldron. Or a Sandslash; he can't decide)

        I should probably explain what each of the backgrounds are meant to represent:

        CHARACTER BACKGROUNDS - Backgrounds depicting the character. Obtained for getting either an A or S rank in any level as that character. You get a normal version for A ranks and a super version for S ranks.
        ZONE BACKGROUNDS - These are the level backgrounds. You get them from earning an A rank in that zone as any character
        GAME BACKGROUNDS - Earned for getting at least a certain rank in every zone with a certain character. This is a reference to how Metroid Dread gives you artwork of previous 2D Metroid games (and also Other M for some reason) depending how quickly you beat the game and what difficulty you are playing on
        OTHER BACKGROUNDS - Some backgrounds are miscalaneous. See the comments for specifics

    */

    //return "bg_dataselect"
    return CUSTOM_DATASELECT_BACKGROUNDS[scr.option.menuBG]
}

constant array<u64> CUSTOM_DATASELECT_BACKGROUNDS =
{
    "bg_dataselect",    // 0x00
    "background-p",     // 0x01
    "background-aiz",   // 0x02
    "background-hcz",   // 0x03
    "background-mgz",   // 0x04
    "background-cnz",   // 0x05
    "background-icz",   // 0x06
    "background-lbz",   // 0x07
    "background-mhz",   // 0x08
    "background-fbz",   // 0x09
    "background-soz",
    "background-lrz",
    "background-ssz",
    "background-dez",
    "background-s3",
    "background-sk",
    "background-sonic",
    "background-tails",
    "background-knux",
    "background-supersonic",
    "background-supertails",
    "background-superknux",
    "background-metalsonic",
    "background-metaltails",
    "background-metalknux",
    "background-ddz",
    "background-hpz",
    "background-sea",
    "background-sonic-all",
    "background-sonic-allc",
    "background-sonic-allb",
    "background-sonic-alla",
    "background-sonic-alls",
    "background-sonic-allp",
    "background-tails-all",
    "background-tails-allc",
    "background-tails-allb",
    "background-tails-alla",
    "background-tails-alls",
    "background-tails-allp",
    "background-knux-all",
    "background-knux-allc",
    "background-knux-allb",
    "background-knux-alla",
    "background-knux-alls",
    "background-knux-allp",
    "background-s",
}



// *Boomer is a term that the Fleetway comic used to refer to its readers because 1. it was the 90s and 2. "Sonic Fan" wasn't an insult yet. The term is derived from "Sonic Boom" (not the song; we got the better soundtrack). It does not refer to people born between 1946 and 1964, although there's nothing to say that they couldn't be (Sonic) Boomers as well.

// Anyway, this is the nuclear option
function void scr.clearAllScoreData()
{
    // TODO: Make this more optimal

    scr.saveHighScore(0x0000, 0, true)
    scr.saveHighScore(0x0000, 1, true)
    scr.saveHighScore(0x0000, 2, true)
    scr.saveHighScore(0x0000, 3, true)
    scr.saveHighScore(0x0000, 4, true)

    scr.saveHighScore(0x0001, 0, true)
    scr.saveHighScore(0x0001, 1, true)
    scr.saveHighScore(0x0001, 2, true)
    scr.saveHighScore(0x0001, 3, true)
    scr.saveHighScore(0x0001, 4, true)

    scr.saveHighScore(0x0100, 0, true)
    scr.saveHighScore(0x0100, 1, true)
    scr.saveHighScore(0x0100, 2, true)
    scr.saveHighScore(0x0100, 3, true)
    scr.saveHighScore(0x0100, 4, true)

    scr.saveHighScore(0x0101, 0, true)
    scr.saveHighScore(0x0101, 1, true)
    scr.saveHighScore(0x0101, 2, true)
    scr.saveHighScore(0x0101, 3, true)
    scr.saveHighScore(0x0101, 4, true)

    scr.saveHighScore(0x0200, 0, true)
    scr.saveHighScore(0x0200, 1, true)
    scr.saveHighScore(0x0200, 2, true)
    scr.saveHighScore(0x0200, 3, true)
    scr.saveHighScore(0x0200, 4, true)

    scr.saveHighScore(0x0201, 0, true)
    scr.saveHighScore(0x0201, 1, true)
    scr.saveHighScore(0x0201, 2, true)
    scr.saveHighScore(0x0201, 3, true)
    scr.saveHighScore(0x0201, 4, true)

    scr.saveHighScore(0x0300, 0, true)
    scr.saveHighScore(0x0300, 1, true)
    scr.saveHighScore(0x0300, 2, true)
    scr.saveHighScore(0x0300, 3, true)
    scr.saveHighScore(0x0300, 4, true)

    scr.saveHighScore(0x0301, 0, true)
    scr.saveHighScore(0x0301, 1, true)
    scr.saveHighScore(0x0301, 2, true)
    scr.saveHighScore(0x0301, 3, true)
    scr.saveHighScore(0x0301, 4, true)

    scr.saveHighScore(0x0400, 0, true)
    scr.saveHighScore(0x0400, 1, true)
    scr.saveHighScore(0x0400, 2, true)
    scr.saveHighScore(0x0400, 3, true)
    scr.saveHighScore(0x0400, 4, true)

    scr.saveHighScore(0x0401, 0, true)
    scr.saveHighScore(0x0401, 1, true)
    scr.saveHighScore(0x0401, 2, true)
    scr.saveHighScore(0x0401, 3, true)
    scr.saveHighScore(0x0401, 4, true)

    scr.saveHighScore(0x0500, 0, true)
    scr.saveHighScore(0x0500, 1, true)
    scr.saveHighScore(0x0500, 2, true)
    scr.saveHighScore(0x0500, 3, true)
    scr.saveHighScore(0x0500, 4, true)

    scr.saveHighScore(0x0501, 0, true)
    scr.saveHighScore(0x0501, 1, true)
    scr.saveHighScore(0x0501, 2, true)
    scr.saveHighScore(0x0501, 3, true)
    scr.saveHighScore(0x0501, 4, true)

    scr.saveHighScore(0x0600, 0, true)
    scr.saveHighScore(0x0600, 1, true)
    scr.saveHighScore(0x0600, 2, true)
    scr.saveHighScore(0x0600, 3, true)
    scr.saveHighScore(0x0600, 4, true)

    scr.saveHighScore(0x0601, 0, true)
    scr.saveHighScore(0x0601, 1, true)
    scr.saveHighScore(0x0601, 2, true)
    scr.saveHighScore(0x0601, 3, true)
    scr.saveHighScore(0x0601, 4, true)

    scr.saveHighScore(0x0700, 0, true)
    scr.saveHighScore(0x0700, 1, true)
    scr.saveHighScore(0x0700, 2, true)
    scr.saveHighScore(0x0700, 3, true)
    scr.saveHighScore(0x0700, 4, true)

    scr.saveHighScore(0x0701, 0, true)
    scr.saveHighScore(0x0701, 1, true)
    scr.saveHighScore(0x0701, 2, true)
    scr.saveHighScore(0x0701, 3, true)
    scr.saveHighScore(0x0701, 4, true)

    scr.saveHighScore(0x0800, 0, true)
    scr.saveHighScore(0x0800, 1, true)
    scr.saveHighScore(0x0800, 2, true)
    scr.saveHighScore(0x0800, 3, true)
    scr.saveHighScore(0x0800, 4, true)

    scr.saveHighScore(0x0801, 0, true)
    scr.saveHighScore(0x0801, 1, true)
    scr.saveHighScore(0x0801, 2, true)
    scr.saveHighScore(0x0801, 3, true)
    scr.saveHighScore(0x0801, 4, true)

    scr.saveHighScore(0x0900, 0, true)
    scr.saveHighScore(0x0900, 1, true)
    scr.saveHighScore(0x0900, 2, true)
    scr.saveHighScore(0x0900, 3, true)
    scr.saveHighScore(0x0900, 4, true)

    scr.saveHighScore(0x0901, 0, true)
    scr.saveHighScore(0x0901, 1, true)
    scr.saveHighScore(0x0901, 2, true)
    scr.saveHighScore(0x0901, 3, true)
    scr.saveHighScore(0x0901, 4, true)

    scr.saveHighScore(0x0A00, 0, true)
    scr.saveHighScore(0x0A00, 1, true)
    scr.saveHighScore(0x0A00, 2, true)
    scr.saveHighScore(0x0A00, 3, true)
    scr.saveHighScore(0x0A00, 4, true)

    scr.saveHighScore(0x0B00, 0, true)
    scr.saveHighScore(0x0B00, 1, true)
    scr.saveHighScore(0x0B00, 2, true)
    scr.saveHighScore(0x0B00, 3, true)
    scr.saveHighScore(0x0B00, 4, true)

    scr.saveHighScore(0x0B01, 0, true)
    scr.saveHighScore(0x0B01, 1, true)
    scr.saveHighScore(0x0B01, 2, true)
    scr.saveHighScore(0x0B01, 3, true)
    scr.saveHighScore(0x0B01, 4, true)    
}
