/*
	This script file is derived of the Sonic 3 A.I.R. script software distribution.
	Copyright (C) 2017-2022 by Eukaryot

	Published under the GNU GPLv3 open source software license, see license.txt
	or https://www.gnu.org/licenses/gpl-3.0.en.html
*/

global bool scr.isOnResultsScreen = 0
global bool scr.isOnDEZ2ResultsScreen = 0
global bool scr.endgame = 0

// Enable this if you are testing out the P rank, set it to 0 before commiting!
#define PRANKTEST = 0

// Enable this to allow the functions behind the vanilla results screen to run, allowing it to render
#define SHOWVANILLARESULTS = 0

// Enable to restore the original time bonus system (used for testing)
#define USE_NEW_TIMEBONUS = 1

constant array <u64> RANK_KEYS = 
{
	"e", "d", "c", "b", "a", "s", "p"
}

constant array <string> CHAR_NAMES =
{
	"Sonic & Tails",
	"Sonic",
	"Tails",
	"Knuckles",
	"Knuckles & Tails"
}

function u64 getRankSprite() //pascal case is subjectively better then camel case.
{
	u8 rank = scr.getStageRank() // Running this just once and saving it as a u8 to reduce CPU usage. I think.
	u64 Prefix = scr.option.rankSprites ? "SA2rank" : "rank"
	return stringformat("%s-%s", Prefix, RANK_KEYS[rank - 1])	
}

function u64 getResultsMusic()
{
	u8 rank = scr.getStageRank()
	return stringformat("results-%s",RANK_KEYS[rank - 1])
}

//-------------------------------------------------------//
// Results screen at end of act                          //
//-------------------------------------------------------//

//# address-hook(0x02dc36) end(0x02dd38)
function void LevelResults.UpdateBonusCounting()
{
	// Essentinally a complete rebuild of the vanilla function
	Renderer.drawText("oxyfont_regular", 150, 15, stringformat("%s winned [sic]", CHAR_NAMES[global.characters], false), 0xffffffff, 1, 0, 0xe000, 0)
	Renderer.drawText("oxyfont_regular", 90, 60, stringformat("Level Score: %d", results.total_bonus), 0xffffffff, 1, 0, 0xe000, 0)
	Renderer.drawText("oxyfont_regular", 90, 75, stringformat("Time Bonus: %d", results.time_bonus), 0xffffffff, 1, 0, 0xe000, 0)
	Renderer.drawText("oxyfont_regular", 90, 90, stringformat("Ring Bonus: %d", results.ring_bonus), 0xffffffff, 1, 0, 0xe000, 0)
	Renderer.drawText("oxyfont_regular", 90, 105, stringformat("Cool Bonus: %d", scr.coolBonus), 0xffffffff, 1, 0, 0xe000, 0)
	Renderer.drawText("oxyfont_regular", 90, 120, stringformat("Total Score: %d", player.score), 0xffffffff, 1, 0, 0xe000, 0)
	Renderer.drawText("oxyfont_regular", 90, 135, stringformat("High Score: %d", scr.getHighScore(global.zone_act.apparent, global.characters)), 0xffffffff, 1, 0, 0xe000, 0)
	
	results.total_bonus = scr.levelScore

	if (objA0.countdown_value != 0)
	{
		--objA0.countdown_value
		if (objA0.countdown_value != 289)
			return

		// Reset char.drown_countdown for both characters
		u8[0xffffb000 + 0x2c] = 255
		u8[0xffffb04a + 0x2c] = 255
        // TODO: Disable drowning entirely whilst on the results screen

		playMusic(MUSIC_LEVELCLEAR)

		return
	}

	u16 delta = 10

	if (Game.getSetting(SETTING_LEVELRESULT_SCORE))
	{
		// Count faster over time
		if (results.total_bonus >= 3000)
			delta = 30
		else if (results.total_bonus >= 1000)
			delta = 20

		// Allow for manually (more or less) skipping the counter
		if ((control.pad1.state & (CONTROL_ABC | CONTROL_START)) || Input.buttonDown(BUTTON_Y))
		{
			delta = 200
		}
	}

	D0 = 0
	#if PRANKTEST == 0
		if (results.time_bonus != 0)
		{
			u16 diff = min(delta, results.time_bonus)
			D0.u16 += diff
			results.time_bonus -= diff
		}
		if (results.ring_bonus != 0)
		{
			u16 diff = min(delta, results.ring_bonus)
			D0.u16 += diff
			results.ring_bonus -= diff
		}
		if (scr.coolBonus != 0)
		{
			u16 diff = min(delta, scr.coolBonus)
			D0.u16 += diff
			scr.coolBonus -= diff
		}
	#endif

	results.total_bonus = (D0.u16 + scr.levelScore) / 10
	if (D0.u16 != 0)
	{
		// Still counting
		addScore(D0)
		if ((level.framecounter & 0x03) == 0)
		{
			playSound(SFX_CLICK)
			Input.setControllerRumble(-1, 0.0f, 0.25f, 100)
		}
	}
	
	else
	{
		// Done

		bool gotHighScore = scr.getStageRank() > scr.getBestRank(global.zone_act, global.characters)

		scr.saveHighScore(global.zone_act.apparent, global.characters, 0)
		if (gotHighScore == true)
			scr.saveRankData(global.zone_act.apparent, global.characters, scr.getStageRank(), 0) // Records your best rank.

		Renderer.drawSprite(getRankSprite(), 275, 100, 100, 0x40, 0xe000) // TODO: Replace this with a spritehandle

        if (gotHighScore)
            Renderer.drawText("oxyfont_regular", 200, 100, "New Record!", 0xffffffff, 1, 0, 0xe000, 0)
    
		if (!Audio.isPlayingAudio(getResultsMusic()))
			Audio.playAudio(getResultsMusic(), 0x01)
			
		if (scr.shutmeup == 0)
		{
			if (scr.getStageRank() == 6) // S Rank
            {
				Audio.playAudio(MUSIC_CHAOSEMERALD, 0x00)
                Game.setSecretUnlocked(0x12) // Getting an S rank will also unlock the game speed option because the Sonic 3 unlock code is nigh-impossible without a wired controller and a CRT or cheating via emulator slowdown
            }
			else if (scr.getStageRank() == 7) // P Rank
			{
				Audio.playAudio("tada", 0x00)
				scr.savePRank(global.zone_act.apparent, global.characters, false)
			}
			else
				Audio.playAudio(0xb0, 0x00)

			if (gotHighScore)
				Audio.playAudio("newrecord", 0x00) // Da da da da da daaaaa!
			
			scr.shutmeup = 1
		}

		if ((control.pad1.state & (CONTROL_ABC)) || Input.buttonDown(BUTTON_Y))
		{
			playMusic(MUSIC_CTRL_STOP)
			// Special handling for Sky Sanctuary Zone (S/T) and probably also Lava Reef Boss
			if (global.zone_act == 0x0a00 || u16[A0 + 0x2c] != 0)
			{
				sram.block_interrupts.u8 = 0xff
				SaveGameOnLevelFinished()
			}

			objA0.countdown_value = 90
			objA0.base_state += 2

			scr.isOnResultsScreen = 0
			scr.shutmeup = 0 // Re-enable sound effects
			
			if (global.zone_act.apparent == 0x1700)
			{
				scr.endgame = 1
				objA0.update_address = 0x0803d6
			}

			else
			{
				LevelResults.AdvanceToNextAct()
				scr.showHUD = true // Make the HUD visible	
			}
		}
	}
}

LevelResults.AdvanceToNextAct()

// I've opted against including all of the results screen code because that would break compatibility

//# address-hook(0x080382) end(0x0803d4)
function void fn080382() // DEZ2 results screen
{
	if (scr.isOnDEZ2ResultsScreen == 0)
	{
		if (allocDynamicObjectStd())
		{
			scr.isOnDEZ2ResultsScreen = 1
			objA1.update_address = 0x02dad0
		}
	}
	else if (scr.endgame == 1)
	{
		//scr.isOnDEZ2ResultsScreen = 0
		base.fn080382()
	}
}

//# address-hook(0x02dae6) end(0x02dbc8)
function void fn02dae6()
{
	scr.showHUD = false
	scr.isOnResultsScreen = 1
	playMusic(MUSIC_CTRL_FADEOUT)
	//Renderer.drawText("oxyfont_regular", 250, 100, "YOU'RE WINNER!", 0xffffffff, 1, 0, 0xe000, 0)
	
	results.time_bonus = scr.getTimeBonus() // The bonuses have been spun off into a seperate function
	results.ring_bonus = scr.getRingBonus()
	
	results.total_bonus = 0
	objA0.countdown_value = 360
	u16[A0 + 0x30] = 12
	objA0.base_state += 2
}

#if SHOWVANILLARESULTS == 0

//# address-hook(0x02dbca) end(0x02dc34)
function void fn02dbca()
{
	if (kosinski.waiting_modules != 0)
		return

	//Create the HUD elements
	if (allocDynamicObjectAfterA0())
	{
		A2 = 0x02deba
		D1 = 11

		while (D1.s16 >= 0)
		{
			objA1.update_address = u32[A2]
			objA1.render_flags = render_flag.COMPOUND
			u16[A1 + 0x46] = u16[A2+4]
			//objA1.position.x.u16 = u16[A2+6] // Commented out to prevent rendering
			//objA1.position.y.u16 = u16[A2+8]
			u8[A1 + 0x05] = (s16[A1 + 0x10] >= 0) ? 0xff : 0x00
			u8[A1 + 0x22] = u8[A2+10]
			objA1.box_size.x = u8[A2+11]
			u8[A1 + 0x28] = u16[A2+12]
			objA1.mapping_offset = 0x02f26a
			u16[A1 + 0x48] = A0.u16
			A2 += 14

			/*#if STANDALONE // This might not need to be commented out, but still.
			{
				// Move elements towards screen center
				u16 offset = getScreenExtend()
				objA1.position.x.u16 += offset
				if (objA1.update_address != addressof(TitleCard.RedBarElement.Update))
					u16[A1 + 0x46] += offset
			}
			#endif*/

			--D1.s16
			if (!allocDynamicObjectAfterA1())
				break
		}

		objA0.base_state += 2
		if (global.act.apparent == 0)
		{
			// AIZ and ICZ have some special handling of apparent vs. current act 1
			if (global.zone.apparent != 0x00 && global.zone.apparent != 0x05)
			{
				u8[0xffffeec6] = 0xff
			}
		}
	}
}

#endif

function u16 scr.getTimeBonus() // Just a port of the original function
{
    u16 scoreBonus

    u32 seconds = timer.seconds + u32(timer.minutes) * 60
	#if USE_NEW_TIMEBONUS == 1

	scoreBonus = 2000

	if (seconds > 60 && seconds < 420)
		scoreBonus -= (seconds - 60) * 5
	else if (seconds >= 420)
		scoreBonus = 0 // Cut the score bonus entirely if you spend more than 7 minutes on a level

	#else // Return to original time bonus if the preprocessor isn't set
    // Time bonus		  Original	   S3AIR
    //  - 0:00 .. 0:59	-> 50.000	-> 50.000
    //  - 1:00 .. 1:29	-> 10.000	-> 10.000
	//  - 1:30 .. 1:59	->  5.000	-> 10.000
	//  - 2:00 .. 2:29	->  4.000	->  5.000
	//  - 2:30 .. 2:59	->  3.000	->  5.000
    //  - 3:00 .. 3:29	->  1.000	->  3.000
	//  - 3:30 .. 3:59	->    100	->  3.000
	//  - 4:00 .. 4:59	->    100	->  2.000
	//  - 5:00 .. 5:59	->    100	->  1.000
	//  - 6:00 .. 6:59	->    100	->    500
	//  - 7:00 .. 9:58	->    100	->      0
    // The 9:59 bonus has been removed to prevent cheesing the higher ranks

    // No need for if standalone because this mod is exclusively tested on and designed around S3AIR proper

    if (seconds < 60)
		scoreBonus = 5000
    else if (seconds < 120)
		scoreBonus = 1000
	else if (seconds < 180)
		scoreBonus = 500
	else if (seconds < 240)
		scoreBonus = 300
	else if (seconds < 300)
		scoreBonus = 200
	else if (seconds < 360)
		scoreBonus = 100
	else if (seconds < 420)
		scoreBonus = 50
	else
		scoreBonus = 0

	#endif

    return scoreBonus
	// I wish S3AIR had case switching
}

function u16 scr.getRingBonus()
{
    // doStuff()
    return ring_counter * 10 // Temporary
}

// TODO: Make it so that Big Rings reward 1000 points on the spot instead of 50 rings












